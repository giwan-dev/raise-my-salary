{"version":3,"sources":["SalaryRateCalculator.tsx","commonRatio.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SalaryRateCalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","finalSalary","initialSalary","result","year","handleInitialSalaryInputChange","bind","assertThisInitialized","handleFinalSalaryInputChange","handleYearInputChange","handleSubmit","handleReset","renderResult","renderResetButton","e","setState","currentTarget","valueAsNumber","preventDefault","_this$state","commonRatio","initial","final","index","Error","Math","pow","getCommonRatio","toFixed","react_default","a","createElement","type","onClick","_this$state2","onSubmit","value","onChange","React","Component","App","SalaryRateCalculator_SalaryRateCalculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1494f986.chunk.js","sourcesContent":["import React from 'react'\nimport { getCommonRatio } from './commonRatio'\n\ninterface SalaryRateCalculatorState {\n  initialSalary: number\n  finalSalary: number\n  year: number\n  result: string|null\n}\n\nexport default class SalaryRateCalculator extends React.Component<{}, SalaryRateCalculatorState> {\n  constructor(props: {}) {\n    super(props)\n\n    this.state = {\n      finalSalary: 0,\n      initialSalary: 0,\n      result: null,\n      year: 0,\n    }\n\n    this.handleInitialSalaryInputChange = this.handleInitialSalaryInputChange.bind(this)\n    this.handleFinalSalaryInputChange = this.handleFinalSalaryInputChange.bind(this)\n    this.handleYearInputChange = this.handleYearInputChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleReset = this.handleReset.bind(this)\n    this.renderResult = this.renderResult.bind(this)\n    this.renderResetButton = this.renderResetButton.bind(this)\n  }\n\n  public handleInitialSalaryInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      initialSalary: e.currentTarget.valueAsNumber,\n    })\n  }\n\n  public handleFinalSalaryInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      finalSalary: e.currentTarget.valueAsNumber,\n    })\n  }\n\n  public handleYearInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      year: e.currentTarget.valueAsNumber,\n    })\n  }\n\n  public handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n\n    const { initialSalary, finalSalary, year } = this.state\n    const commonRatio = getCommonRatio(initialSalary, finalSalary, year)\n    this.setState({\n      result: ((commonRatio - 1) * 100).toFixed(1),\n    })\n  }\n\n  public handleReset() {\n    this.setState({\n      finalSalary: 0,\n      initialSalary: 0,\n      result: null,\n      year: 0,\n    })\n  }\n\n  public renderResult() {\n    const { result } = this.state\n\n    if (result !== null) {\n      return (\n        <div>\n          매년 {result}% 인상으로 달성할 수 있습니다! 화이팅!\n        </div>\n      )\n    }\n    return null\n  }\n\n  public renderResetButton() {\n    if (this.state.result !== null) {\n      return (\n        <button\n          type=\"reset\"\n          onClick={this.handleReset}\n        >\n          다시하기\n        </button>\n      )\n    }\n  }\n\n  public render() {\n    const { initialSalary, finalSalary, year } = this.state\n\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              type=\"number\"\n              value={year}\n              onChange={this.handleYearInputChange}\n            />\n            년 동안\n          </label>\n          <label>\n            나의 연봉\n            <input\n              type=\"number\"\n              value={initialSalary}\n              onChange={this.handleInitialSalaryInputChange}\n            />\n            원을\n          </label>\n          <label>\n            <input\n              type=\"number\"\n              value={finalSalary}\n              onChange={this.handleFinalSalaryInputChange}\n            />\n            원으로 만들겠다!!\n          </label>\n          <button type=\"submit\">도전!</button>\n          {this.renderResetButton()}\n        </form>\n        {this.renderResult()}\n      </div>\n    )\n  }\n}\n","/**\n * get common ratio in geometric sequence\n * when first value is \"initial\" and \"index\" + 1 th value is final.\n * @param initial\n * @param final\n * @param index\n */\nexport function getCommonRatio(initial: number, final: number, index: number): number {\n  if (index === 0) {\n    throw new Error('Argument index cannot be 0.')\n  }\n  if (initial === 0) {\n    throw new Error('Argument initial cannot be 0.')\n  }\n\n  return Math.pow(final / initial, 1 / index)\n}\n","import React from 'react'\nimport SalaryRateCalculator from './SalaryRateCalculator'\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <SalaryRateCalculator />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}